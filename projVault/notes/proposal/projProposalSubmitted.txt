The process of this project relates to Minesweeper, a grid-based game wherein a finite amount of mines are hidden on the grid. The player selectively reveals grid cells, with each open cell showing the number of mines in the 8 surrounding cells. The player uses the cells to inform their knowledge of mine locations, "flagging" suspected mine positions. The game is won when all non-mine cells have been revealed.

The question this project is aiming to answer is: what is the most cognitively-efficient set of techniques for solving a minesweeper board, and how do they scale with minesweeper on increasingly complex networks? This question arises from the fact that minesweeper has many techniques for arriving at the same solutions, and some techniques require a greater mental effort from the player to execute successfully. Costly techniques are necessary to solve the more complex mine arrangements, but such arrangements are rare hence it's frequently possible to waste time executing a costly technique on an arrangement that the technique doesn't solve. This effect may be exacerbated on more complex networks with potentially greater interconnectivity of nodes than a simple grid, or potentially may also be diminished on networks that are less connected but larger.

Start with background research on minesweeper, looking for existing research into the difficulty of playing the game, different mine patterns, etc. write a Minizinc model for minesweeper that solves the board by detecting a restricted set of programmed patterns, a model should ultimately work not just on the classic 2d grid but arbitrary networks. Determine some "cognitive cost" statistic that objectively quantifies the memory and computational cost of detecting a given minesweeper pattern, which could be derived from e.g. the amount of movement required (area of knowledge needed), number of comparisons required, etc. select a set of minesweeper patterns learned and published by the minesweeper community, and adapt the patterns for use in a non-grid playing field. Subsequently, apply the aforementioned statistic, and ultimately use this to investigate how patterns' usefullness (solve time, or solve-time:cost ratio) scales with increased complexity of the board.
